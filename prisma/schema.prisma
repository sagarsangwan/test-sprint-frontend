generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  tests         Test[]
  results       Result[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Test {
  id             String    @id @default(cuid())
  title          String
  totalQuestions Int
  totalMarks     Int
  totalTime      Int
  createdAt      DateTime  @default(now())
  pdfFileUrl     String?
  pdfHash        String?   @unique
  aiStatus       String    @default("pending") // processing | done | error
  rawText        String?
  rawJson        Json?
  userId         String?
  user           User?     @relation(fields: [userId], references: [id])
  subjects       Subject[]
  results        Result[]
  jobs           Job[] // all processing jobs (extract/split/generate)
}

model Subject {
  id            String         @id @default(cuid())
  name          String
  extractedText String? // subject-wise text extracted from rawText
  generatedJson Json? // final structured questions from Gemini
  generatedAt   DateTime? // when AI finished
  status        String         @default("queued") // queued | processing | done | error
  testId        String
  test          Test           @relation(fields: [testId], references: [id])
  questions     Question[]
  subjectScores SubjectScore[]
}

model Question {
  id            String   @id @default(cuid())
  questionText  String
  options       Json
  correctAnswer String?
  explanation   String?
  subjectId     String
  subject       Subject  @relation(fields: [subjectId], references: [id])
  answers       Answer[]
}

model Result {
  id             String         @id @default(cuid())
  startedAt      DateTime
  finishedAt     DateTime?
  totalScore     Int
  totalTimeTaken Int
  userId         String
  user           User           @relation(fields: [userId], references: [id])
  testId         String
  test           Test           @relation(fields: [testId], references: [id])
  subjectScores  SubjectScore[]
  answers        Answer[]
  accuracy       Int?
}

model SubjectScore {
  id             String  @id @default(cuid())
  score          Int
  totalQuestions Int
  correct        Int
  wrong          Int
  timeTaken      Int
  subjectId      String
  subject        Subject @relation(fields: [subjectId], references: [id])
  resultId       String
  result         Result  @relation(fields: [resultId], references: [id])
  accuracy       Int?
}

model Answer {
  id             String   @id @default(cuid())
  selectedOption String?
  isCorrect      Boolean?
  answeredAt     DateTime @default(now())
  resultId       String
  result         Result   @relation(fields: [resultId], references: [id])
  questionId     String
  question       Question @relation(fields: [questionId], references: [id])
}

model Job {
  id        String   @id @default(cuid())
  type      String // extract | split | generate
  status    String   @default("queued") // queued | running | done | error
  log       String? // error or success log
  testId    String
  test      Test     @relation(fields: [testId], references: [id])
  subjectId String? // optional for generation jobs
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
