generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  tests         Test[]
  results       Result[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Test {
  id             String   @id @default(cuid())
  title          String
  totalQuestions Int
  totalMarks     Int
  totalTime      Int
  createdAt      DateTime @default(now())
  pdfFileUrl     String?
  aiStatus       String   @default("processing")

  // relations
  user     User?     @relation(fields: [userId], references: [id])
  userId   String?
  subjects Subject[]
  results  Result[]
}

model Subject {
  id     String @id @default(cuid())
  name   String
  test   Test   @relation(fields: [testId], references: [id])
  testId String

  questions     Question[]
  subjectScores SubjectScore[] // ðŸ‘ˆ added backlink
}

model Question {
  id            String  @id @default(cuid())
  questionText  String
  options       Json
  correctAnswer String?
  explanation   String?

  subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId String

  answers Answer[] // ðŸ‘ˆ added backlink
}

model Result {
  id             String    @id @default(cuid())
  startedAt      DateTime
  finishedAt     DateTime?
  totalScore     Int
  totalTimeTaken Int

  user   User   @relation(fields: [userId], references: [id])
  userId String

  test   Test   @relation(fields: [testId], references: [id])
  testId String

  subjectScores SubjectScore[]
  answers       Answer[] // ðŸ‘ˆ added backlink
}

model SubjectScore {
  id             String @id @default(cuid())
  score          Int
  totalQuestions Int
  correct        Int
  wrong          Int
  timeTaken      Int

  subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId String

  result   Result @relation(fields: [resultId], references: [id])
  resultId String
}

model Answer {
  id             String   @id @default(cuid())
  selectedOption String?
  isCorrect      Boolean?
  answeredAt     DateTime @default(now())

  result   Result @relation(fields: [resultId], references: [id])
  resultId String

  question   Question @relation(fields: [questionId], references: [id])
  questionId String
}
